// Попередження про використання функцій, які можуть бути вважаються небезпечними,
// для використання функцій вводу та виводу.
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;

using namespace std;

// Функція, яка рахує кількість груп символів 'while' в рядку.
int Count(char* str)
{
	// Якщо довжина рядка менше 5, то немає можливості утворення групи.
	if (strlen(str) < 5)
		return 0;

	int k = 0; // Лічильник груп.
	// Проходимо по рядку, перевіряючи умову для кожної групи.
	for (int i = 1; str[i + 1] != 0; i++)
		if (str[i] == 'w' && str[i + 1] == 'h' && str[i + 2] == 'i' && str[i + 3] == 'l' && str[i + 4] == 'e')
			k++;

	return k; // Повертаємо кількість знайдених груп.
}

// Функція, яка замінює групи символів 'while' на "***".
char* Change(char* str)
{
	size_t len = strlen(str);
	// Якщо довжина рядка менше 5, то немає можливості утворення групи.
	if (len < 5)
		return str;

	// Виділення пам'яті для нового рядка, де будуть зберігатися результати заміни.
	char* tmp = new char[len * 5 + 1];
	char* t = tmp;
	tmp[0] = '\0';
	size_t i = 0;

	// Проходимо по рядку та замінюємо групи, якщо знаходимо їх.
	while (i < len && str[i + 2] != 0)
	{
		// Перевірка умови для групи '+ -'.
		if (str[i] == 'w' && str[i + 1] == 'h' && str[i + 2] == 'i' && str[i + 3] == 'l' && str[i + 4] == 'e')
		{
			strcat(t, "***"); // Заміна групи на "***".
			t += 3; // Зміщення покажчика на кількість доданих символів.
			i += 5; // Зміщення покажчика у вихідному рядку на кількість оброблених символів.
		}
		else
		{
			*t++ = str[i++];
			*t = '\0';
		}
	}

	// Додавання залишку рядка, який не був оброблений.
	*t++ = str[i++];
	*t++ = str[i++];
	*t = '\0';

	// Копіювання результату заміни назад в оригінальний рядок.
	strcpy(str, tmp);

	// Повертаємо результат (новий рядок).
	return tmp;
}

int main()
{
	char str[101];
	cout << "Enter string:" << endl;
	cin.getline(str, 100);
	// Вивід кількості груп 'while' у введеному рядку.
	cout << "String contained " << Count(str) << " groups of 'while'" << endl;

	// Виділення пам'яті та виклик функції для заміни груп в рядку.
	char* dest = new char[151];
	dest = Change(str);

	// Вивід оригінального та заміненого рядка.
	cout << "Modified string (param) : " << str << endl;
	cout << "Modified string (result): " << dest << endl;

	// Звільнення виділеної пам'яті.
	delete[] dest;

	return 0;
}
